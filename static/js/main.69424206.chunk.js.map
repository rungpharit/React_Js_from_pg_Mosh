{"version":3,"sources":["components/counter.jsx","components/counters.jsx","components/navbar.js","App.js","serviceWorker.js","index.js"],"names":["Counter","prevProps","preState","console","log","className","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","id","classes","value","Component","Counters","onReset","counters","map","key","NavBar","totalCounters","href","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69424206.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n  class Counter extends Component {\r\n   componentDidUpdate(prevProps,preState){\r\n    \r\n     console.log('preProps',prevProps);\r\n     console.log('preState',preState);\r\n    //  if(prevProps.counter.value != this.props.counter.value){\r\n    //     //we can make Ajax request to get new data from server. Optimazation technique\r\n    //  }\r\n   }\r\n\r\n   componentWillUnmount(){\r\n     console.log('Counter - Unmonted');\r\n   }\r\n    render() {\r\n      console.log('Counter - rendered');\r\n      //console.log(\"props\",this.props); \r\n      return ( \r\n      <div> \r\n       \r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button \r\n         \r\n          onClick =  {() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\">Increment\r\n        </button>\r\n        <button \r\n          onClick = {() => this.props.onDelete(this.props.counter.id)} \r\n          className=\"btn btn-danger btn-sm m-2\">Delete\r\n          </button>\r\n      </div>\r\n      );\r\n    }\r\n\r\n    getBadgeClasses() {\r\n      let classes = \"badge m-2 badge-\";\r\n      classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n      return classes;\r\n    }\r\n\r\n    formatCount(){\r\n      const {value} = this.props.counter;\r\n      return value === 0 ? 'Zero' : value;\r\n\r\n    }\r\n    \r\n  }\r\n  \r\n  export default Counter;","import React, { Component } from 'react';\r\nimport Counter from './counter'\r\n\r\nclass Counters extends Component {\r\n  render() { \r\n    //key will be no pros because it's a spceial attribute\r\n    //<h4>Counter #{Counter.id}</h4> is between <Counter></Counter> children prop\r\n    console.log('Counters - Rendered');\r\n    const {onReset,counters,onDelete,onIncrement} = this.props\r\n    return (\r\n      <div>\r\n        <button \r\n          className=\"btn btn-primary btn-sm m-2\"\r\n          onClick={onReset}>\r\n          Reset</button>\r\n      {counters.map(counter =>(\r\n          <Counter key={counter.id} \r\n          onDelete={onDelete} \r\n          onIncrement ={onIncrement}\r\n          counter={counter}/> \r\n        ))} \r\n      </div> \r\n    );\r\n  };\r\n\r\n  };\r\n  \r\n \r\nexport default Counters;","import React from 'react';\r\n\r\n//Stateless Functional component\r\n//this function in class\r\n//Life cyclce hook need to use in class\r\nconst NavBar = ({totalCounters}) => {\r\n  console.log('NavBar - Rendered');\r\n  return (  \r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar {\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">{totalCounters}</span>\r\n      </a>\r\n    </nav>\r\n  );\r\n\r\n}\r\n\r\n// class NavBar extends Component {\r\n//   render() { \r\n//     return (  \r\n//       <nav className=\"navbar navbar-light bg-light\">\r\n//         <a className=\"navbar-brand\" href=\"#\">\r\n//           Navbar {\" \"}\r\n//           <span className=\"badge badge-pill badge-secondary\">      {this.props.totalCounters}</span>\r\n//         </a>\r\n//       </nav>\r\n//     );\r\n//   }\r\n// }\r\n  \r\nexport default NavBar;","import React , {Component} from 'react';\n\nimport './App.css';\nimport Counters from './components/counters';\nimport NavBar from './components/navbar';\n\nclass App extends Component {\n  state = {  \n    counters : [\n      {id:1,value:0},\n      {id:2,value:0},\n      {id:3,value:0}, \n      {id:4,value:0},\n    ]\n  };\n  constructor(){\n    super();\n    console.log('App - Construtor');\n  }\n  componentDidMount(){\n    //perfect place to make Ajax calls to get data from server\n    console.log('App - Mounted');\n  }\n  handleIncrement = counter =>{\n    console.log(counter);\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = {...counter};\n    counters[index].value++;\n    this.setState({counters});\n  }\n\n  handleReset = () => {\n    const counters = this.state.counters.map(c=> {\n      c.value = 0;\n      return c;\n    });\n    this.setState({counters:counters});\n  };\n\n  handleDelete = (counterId) => {\n    console.log('Event Handler Called',counterId);\n    const counters = this.state.counters.filter(c=> c.id !== counterId);\n    this.setState({counters:counters});\n  };\n  render () {\n    console.log('App - Rendered');\n    return (\n      <React.Fragment>\n      <NavBar totalCounters={this.state.counters.filter(c=> c.value > 0).length}/>\n      <main className=\"container\">\n        <Counters \n        counters={this.state.counters}\n        onReset={this.handleReset}\n        onIncrement = {this.handleIncrement}\n        onDelete = {this.handleDelete}/>\n      </main>\n      </React.Fragment>\n    );\n  };\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}